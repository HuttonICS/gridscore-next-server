/*
 * This file is generated by jOOQ.
 */
package jhi.gridscore.server.database.codegen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jhi.gridscore.server.database.binding.TrialBinding;
import jhi.gridscore.server.database.codegen.GridscoreDb;
import jhi.gridscore.server.database.codegen.Indexes;
import jhi.gridscore.server.database.codegen.tables.records.TrialsRecord;
import jhi.gridscore.server.pojo.Trial;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trials extends TableImpl<TrialsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gridscore_db.trials</code>
     */
    public static final Trials TRIALS = new Trials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrialsRecord> getRecordType() {
        return TrialsRecord.class;
    }

    /**
     * The column <code>gridscore_db.trials.owner_code</code>.
     */
    public final TableField<TrialsRecord, String> OWNER_CODE = createField(DSL.name("owner_code"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>gridscore_db.trials.editor_code</code>.
     */
    public final TableField<TrialsRecord, String> EDITOR_CODE = createField(DSL.name("editor_code"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>gridscore_db.trials.viewer_code</code>.
     */
    public final TableField<TrialsRecord, String> VIEWER_CODE = createField(DSL.name("viewer_code"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>gridscore_db.trials.trial</code>.
     */
    public final TableField<TrialsRecord, Trial> TRIAL = createField(DSL.name("trial"), SQLDataType.JSON.nullable(false), this, "", new TrialBinding());

    /**
     * The column <code>gridscore_db.trials.created_on</code>.
     */
    public final TableField<TrialsRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gridscore_db.trials.updated_on</code>.
     */
    public final TableField<TrialsRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Trials(Name alias, Table<TrialsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trials(Name alias, Table<TrialsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gridscore_db.trials</code> table reference
     */
    public Trials(String alias) {
        this(DSL.name(alias), TRIALS);
    }

    /**
     * Create an aliased <code>gridscore_db.trials</code> table reference
     */
    public Trials(Name alias) {
        this(alias, TRIALS);
    }

    /**
     * Create a <code>gridscore_db.trials</code> table reference
     */
    public Trials() {
        this(DSL.name("trials"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : GridscoreDb.GRIDSCORE_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRIALS_EDITOR_CODE, Indexes.TRIALS_OWNER_CODE, Indexes.TRIALS_VIEWER_CODE);
    }

    @Override
    public UniqueKey<TrialsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Trials.TRIALS, DSL.name("KEY_trials_PRIMARY"), new TableField[] { Trials.TRIALS.OWNER_CODE }, true);
    }

    @Override
    public Trials as(String alias) {
        return new Trials(DSL.name(alias), this);
    }

    @Override
    public Trials as(Name alias) {
        return new Trials(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trials rename(String name) {
        return new Trials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trials rename(Name name) {
        return new Trials(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, Trial, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
